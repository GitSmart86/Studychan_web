# Generated by Django 3.0.7 on 2020-07-25 01:11

import content_users.models._userDjEx
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('content_phylums', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserDjEx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to=content_users.models._userDjEx.UserDjEx.upload_media)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserWeb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_web', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_stat', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserExe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_exe', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserApk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_apk', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Junct_Sub_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('subbedUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subbedUser', to=settings.AUTH_USER_MODEL)),
                ('subbingUser_User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subbingUser_User', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('subbingUser_User', 'subbedUser')},
            },
        ),
        migrations.CreateModel(
            name='Junct_Rate_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posRating', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ratedUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratedUser', to=settings.AUTH_USER_MODEL)),
                ('ratingUser_User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratingUser_User', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('ratingUser_User', 'ratedUser')},
            },
        ),
        migrations.CreateModel(
            name='Junct_PhylumTag_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagged_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_user', to=settings.AUTH_USER_MODEL)),
                ('user_phylum_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_phylum_tag', to='content_phylums.Phylum_Tag')),
            ],
            options={
                'unique_together': {('tagged_user', 'user_phylum_tag')},
            },
        ),
        migrations.AddField(
            model_name='userdjex',
            name='phylum_tags',
            field=models.ManyToManyField(blank=True, related_name='your_phylum_tags', through='content_users.Junct_PhylumTag_User', to='content_phylums.Phylum_Tag'),
        ),
        migrations.AddField(
            model_name='userdjex',
            name='posRatings',
            field=models.ManyToManyField(blank=True, related_name='your_ratings', through='content_users.Junct_Rate_User', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userdjex',
            name='subscribers',
            field=models.ManyToManyField(blank=True, related_name='your_subscriptions', through='content_users.Junct_Sub_User', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userdjex',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
