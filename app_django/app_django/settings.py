"""
Django settings for app_django project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import environ
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", "localhost", "studychan.pythonanywhere.com"]

# Application definition

ROOT_URLCONF = 'app_django.urls'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'content_cards',
    'content_informatics',
    'content_phylums',
    'content_users',

    'corsheaders',

    'rest_framework',
    'rest_framework.authtoken',

    'rest_auth',
    'rest_auth.registration',
    'dj_rest_auth',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 'allauth.socialaccount.providers.facebook',   # USA
    'allauth.socialaccount.providers.google',       # USA
    'allauth.socialaccount.providers.kakao',        # Korea
    'allauth.socialaccount.providers.line',         # Japan/Taiwan
    'allauth.socialaccount.providers.microsoft',    # All
    'allauth.socialaccount.providers.weibo',        # China
    'allauth.socialaccount.providers.yandex',       # Russia
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, "app_react/build"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {

    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # },

    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'studychan',
        'HOST': 'localhost',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'Rushisright97',
    },

    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': 'studychan',
    #     'HOST': '127.0.0.1',
    #     'PORT': '5432',
    #     'USER': 'postgres',
    #     'PASSWORD': 'Rushisright97',
    # },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# --------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------


# Extended Default User Class
AUTH_USER_MODEL = 'content_users.UserDjEx'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# IMG_URL = "http://localhost:8000/media/"

STATIC_URL = '/static/'
MEDIA_URL = '/media/'    # URL prefix you use to access static content

STATIC_ROOT = os.path.join(BASE_DIR, 'static/') # where whitenoise should look for static content
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')   # where user-uploaded FileField data is stored 

STATICFILES_DIRS = [ os.path.join(BASE_DIR, "app_react/build/static"), ]


# ----------------
#  REST-FRAMEWORK
# ----------------

REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.AllowAny',
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}


# -----------------------
#  CORS-HEADERS-SETTINGS
# -----------------------

CORS_ORIGIN_ALLOW_ALL = True

CORS_ORIGIN_WHITELIST = [
    "http://127.0.0.1:3000",
    "https://127.0.0.1:3000",
    "http://127.0.0.1:8000",
    "https://127.0.0.1:8000",
    "http://localhost:3000",
    "https://localhost:3000",
    "http://localhost:8000",
    "https://localhost:8000",
    "http://studychan.pythonanywhere.com",
    "https://studychan.pythonanywhere.com",
]


# ----------
#  ALL-AUTH
# ----------


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# LOGIN_REDIRECT_URL = '/'

SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = ("username_email")
ACCOUNT_EMAIL_REQUIRED = (True)
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = (1)
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = (True)
ACCOUNT_USERNAME_BLACKLIST = ([])
ACCOUNT_EMAIL_VERIFICATION = ("mandatory")  # "mandatory", "optional", "none"

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Provider specific settings
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'client_id': '422115477782-rebgr9q680oq226tkgkpo11ip5elmdg2.apps.googleusercontent.com',
#         'secret': 'P56ykPz-KxhIutimgoGUboqY',
#         'key': ''
#     }
# }
